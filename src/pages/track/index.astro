---
import Typography from '../../components/typography.astro';
import Layout from '../../layouts/Layout.astro';
import Button from '../../components/button.astro';
import { CREATE_TRACK_FORM_ID, ID_TRACKS, CN_TRACK, CN_TRACK_DESC, CN_TRACK_TITLE, CN_TRACK_EMPTY } from '../../features/track/constants';
import Form from '../../components/form';
import Card from '../../components/card.astro';
---
<Layout title="Track" description='Track Some Things'>
  <Card>
    <Typography variant="h2" component="h2" class="mb-4">Tracking</Typography>

    <div id={ID_TRACKS}>
      <a class:list={[CN_TRACK_EMPTY, 'track', CN_TRACK]}>
        <Typography variant="h3" component="h3" class:list={['track-name', CN_TRACK_TITLE]}></Typography>
        <Typography variant="small" component="p" class:list={['track-desc', CN_TRACK_DESC]}></Typography>
      </a>
    </div>
  </Card>
  <Card>
    <Form id={CREATE_TRACK_FORM_ID} method="post">
      <Typography variant='h2' component="h2">Start a Track Group</Typography>

      <Form.Field>
        <Form.Label for="name">Name</Form.Label>
        <Form.Input type="text" name="name" id="name" maxlength={50} />
      </Form.Field>

      <Form.Field>
        <Form.Label for="description">Description</Form.Label>
        <Form.Input component="textarea" name="description" id="description" maxlength={1000} />
      </Form.Field>

      <Button type="submit" variant="primary" class="right">Create Track Group</Button>
    </Form>
  </Card>
</Layout>

<script>
  import { ClientDB } from "../../features/db/client";
  import { CREATE_TRACK_FORM_ID, ID_TRACKS, CN_TRACK, CN_TRACK_EMPTY, CN_TRACK_DESC, CN_TRACK_TITLE } from '../../features/track/constants';
  import type { ITrack } from "../../features/track/types";
  import slugify from "../../utils/slugify";

  (async () => {
    const Store = new ClientDB();
    await Store.connect('TRACKS');

    const f = document.getElementById(CREATE_TRACK_FORM_ID) as HTMLFormElement;
    handleForm(Store, f);
    getAllTracks(Store);
  })();

  function handleForm(Store: ClientDB, f: HTMLFormElement) {
    if (!f) return;
    f.addEventListener('submit', async function handleFormSubmit(ev) {
      ev.preventDefault();
      let formData = new FormData(this);
      let formObj = Object.fromEntries(formData.entries());
      let track: ITrack = { 
        id: crypto.randomUUID(),
        slug: slugify(formObj.name as string ?? ''),
        name: formObj.name as string ?? '',
        description: formObj.description as string ?? '',
        things: [],
      };
      await Store.addTrack(track);
      addTrackToDOM(track);
    });
  }

  function addTrackToDOM(t: ITrack) {
    let tracksContainer = document.getElementById(ID_TRACKS);
    let mt = document.querySelector(`.${CN_TRACK}.${CN_TRACK_EMPTY}`)!;

    if (!mt || !tracksContainer) return;

    let tEl = mt.cloneNode(true) as HTMLAnchorElement;
    tEl.classList.remove(CN_TRACK_EMPTY);
    tEl.querySelector('.' + CN_TRACK_TITLE)!.textContent = t.name;
    tEl.querySelector('.' + CN_TRACK_DESC)!.textContent = t.description;
    tEl.href = `track/${t.slug}`;
    tracksContainer.appendChild(tEl);
  }
   
  async function getAllTracks(Store: ClientDB) {
    let tracks = await Store.getTracks();

    for (const t of tracks) {
      addTrackToDOM(t);
    }
  }

</script>

<style>
  header {
    padding-block: 24px;
    padding-inline: 16px;
  }

  .mb-4 {
    margin-block-end: 1rem;
  }

  .track {
    margin-block-end: .5rem;
  }

  .track-name {
    color: var(--color-aquamarine-900);
    
    @media (prefers-color-scheme: dark) { 
      color: var(--color-aquamarine-500);
    }
  }

  .right {
    margin-left: auto;
  }
</style>