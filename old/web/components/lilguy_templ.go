// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

var doOnce = templ.NewOnceHandle()
var doOnce2 = templ.NewOnceHandle()

func LilGuy(id string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n            /** @param {string} id */\n            function initLilGuy(id) {\n            let lilguy = document.getElementById(id);\n\n            if (!lilguy) return;\n\n            if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {\n                (lilguy.querySelectorAll('svg') ?? []).forEach(/** @param {SVGSVGElement} svg */(svg) => {\n                svg.pauseAnimations();\n                });\n            }\n\n            let leftEye = lilguy.querySelector(\".left-eye\");\n            let rightEye = lilguy.querySelector(\".right-eye\");\n            let hand = lilguy.querySelector(\".hand\");\n            let wavingHand = lilguy.querySelector(\".waving-hand\");\n            let mouth = lilguy.querySelector(\".mouth\");\n            let sleepMouth = lilguy.querySelector(\".sleep-mouth\");\n\n            addTimeBasedFeatures();\n            setInterval(addTimeBasedFeatures, 1000 * 60 * 60 /* every hour */);\n\n            function addTimeBasedFeatures() {\n                let now = new Date();\n                let hours = now.getHours();\n                if (hours >= 5 && hours < 11) {\n                // morning\n                removeSquint([leftEye, rightEye]);\n                addBlink([leftEye, rightEye]);\n                lilguy.querySelector(\".coffee\").classList.remove(\"hidden\");\n                // holding coffee cup, so waving is awkward\n                // TODO: check the play state and if it is not playing, add the fill=\"freeze\" attribute\n                wavingHand.setAttribute('visibility', 'visible');\n                hand.setAttribute('visibility', 'hidden');\n                sleepMouth.setAttribute('visibility', 'hidden');\n                mouth.setAttribute('visibility', 'visible');\n                } else {\n                lilguy.querySelector(\".coffee\").classList.add(\"hidden\");\n                }\n                if (hours >= 11 && hours < 22) {\n                // afternoon\n                removeSquint([leftEye, rightEye]);\n                addBlink([leftEye, rightEye]);\n                wavingHand.setAttribute('visibility', 'visible');\n                hand.setAttribute('visibility', 'hidden');\n                sleepMouth.setAttribute('visibility', 'hidden');\n                mouth.setAttribute('visibility', 'visible');\n                }\n                if (hours >= 22 || hours < 5) {\n                // night\n                removeBlink([leftEye, rightEye]);\n                addSquint([leftEye, rightEye]);\n                // sleeping, so waving is awkward\n                wavingHand.setAttribute('visibility', 'hidden');\n                hand.setAttribute('visibility', 'visible');\n                sleepMouth.setAttribute('visibility', 'visible');\n                mouth.setAttribute('visibility', 'hidden');\n                }\n            };\n            }\n\n            /** @param {Element[]} els */\n            const removeBlink = (els) => els.forEach(el => el.classList.remove('blink'));\n            /** @param {Element[]} els */\n            const addBlink = (els) => els.forEach(el => el.classList.add('blink'));\n            /** @param {Element[]} els */\n            const removeSquint = (els) => els.forEach(el => el.classList.remove('squint'));\n            /** @param {Element[]} els */\n            const addSquint = (els) => els.forEach(el => el.classList.add('squint'));\n        </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = doOnce.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var3 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<style>\n            @keyframes eye-blink {\n            0% {\n                transform: translate(var(--eye-originx), var(--eye-originy)) scale(1, 1) translate(calc(var(--eye-originx) * -1), calc(var(--eye-originy) * -1));\n            }\n            1% {\n                transform: translate(var(--eye-originx), var(--eye-originy)) scale(1, .25) translate(calc(var(--eye-originx) * -1), calc(var(--eye-originy) * -1));\n            }\n            2% {\n                transform: translate(var(--eye-originx), var(--eye-originy)) scale(1, 1) translate(calc(var(--eye-originx) * -1), calc(var(--eye-originy) * -1));\n            }\n            100% {\n                transform: translate(var(--eye-originx), var(--eye-originy)) scale(1, 1) translate(calc(var(--eye-originx) * -1), calc(var(--eye-originy) * -1));\n            }\n            }\n\n            .left-eye {\n            --eye-originx: 17px;\n            --eye-originy: 17px;\n            }\n            .right-eye {\n            --eye-originx: 55px;\n            --eye-originy: 17px;\n            }\n            .squint {\n            transform: translate(var(--eye-originx), var(--eye-originy)) scale(1, .25) translate(calc(var(--eye-originx) * -1), calc(var(--eye-originy) * -1))\n            }\n            .blink {\n            animation-name: eye-blink;\n            animation-duration: 10s;\n            animation-iteration-count: infinite;\n            }\n            @media (prefers-reduced-motion: reduce) {\n            .left-eye, .right-eye {\n                animation: none;\n            }\n            }\n        </style>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = doOnce2.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var3), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"grid place-content-center\" id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(id)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/components/lilguy.templ`, Line: 120, Col: 47}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\"><div class=\"row-start-1 col-start-1 h-8\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, templ.JSFuncCall("initLilGuy", id))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<svg viewBox=\"0 0 72 62\" xmlns=\"http://www.w3.org/2000/svg\" stroke-width=\"6px\" fill=\"none\" stroke-linecap=\"round\" stroke=\"currentColor\" height=\"100%\" onload=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 templ.ComponentScript = templ.JSFuncCall("initLilGuy", id)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var5.Call)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\"><title>Stylized S P, the initials of Scott Powell</title><path d=\"\n            M 41,59\n            L 41,45\n            Q 41,31 55,31\n            Q 69,31 69,17\n            Q 69,3 55,3\n            L 17,3\n            Q 3,3 3,17\n            Q 3,31 17,31\n            Q 31,31 31,45\n            Q 31,59 17,59\n        \"></path> <path class=\"hand\" d=\"M 17,59 Q 10,59 3,59\"></path> <path class=\"waving-hand\" d=\"M 17,59 Q 10,59 3,59\" visibility=\"hidden\"><animate attributeName=\"d\" values=\"\n              M 17,59 Q 10,59 3,59;\n              M 17,59 Q 10,59 3,59;\n              M 17,59 Q 10,59 3,54;\n              M 17,59 Q 10,59 3,52;\n              M 17,59 Q 10,59 3,54;\n              M 17,59 Q 10,59 3,52;\n              M 17,59 Q 10,59 3,54;\n              M 17,59 Q 10,59 3,59\" keyTimes=\"0;0.90;0.91;0.94;0.95;0.96;0.97;1\" dur=\"18s\" repeatCount=\"indefinite\" restart=\"whenNotActive\"></animate></path> <path class=\"left-eye\" d=\"M 17,17 L 17,17\"></path> <path class=\"right-eye\" d=\"M 55,17 L 55,17\"></path> <path class=\"mouth\" stroke-width=\"3px\" d=\"M 33,24 C 33,27 39,27 39,24\"></path> <path class=\"sleep-mouth\" stroke-width=\"3px\" d=\"M 33,24 C 33,27 39,27 39,24 C 39,21 33,21, 33,24\" visibility=\"hidden\"><animateTransform attributeName=\"transform\" type=\"translate\" dur=\"2s\" repeatCount=\"indefinite\" values=\"18 12.75;0 0;18 12.75\" begin=\"0s\"></animateTransform> <animateTransform attributeName=\"transform\" type=\"scale\" values=\"0.5;1;0.5\" dur=\"2s\" repeatCount=\"indefinite\" additive=\"sum\" begin=\"0s\"></animateTransform></path></svg></div><div class=\"coffee hidden row-start-1 col-start-1 h-4 self-end justify-self-start -scale-x-100 -translate-x-0.5 translate-y-1\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = coffee().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
