{
	// Place your scottapow workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  "Web Component Lite Dom": {
    "scope": "javascript,typescript",
    "prefix": "wcld",
    "body": [
      "import { cva } from \"./styled-system/css/index.js\";",
      "",
      "const styles = cva({",
      "  base: {",
      "    ",
      "  },",
      "  variants: {",
      "",
      "  },",
      "  defaultVariants: {",
      "",
      "  },",
      "});",
      "",
      "class ${TM_FILENAME_BASE/(\\.c)|([a-z]+)|-([a-z-]+)/${2:/pascalcase}${3:/pascalcase}/g}Component extends HTMLElement {",
      "  constructor() {",
      "    super();",
      "  }",
      "",
      "  static observedAttributes = [/* props go here */];",
      "",
      "  connectedCallback() {",
      "    let root = document.createElement(\"${TM_FILENAME_BASE/(\\.c)|([a-z]+)|-([a-z-]+)/$2$3/g}\");",
      "    root.classList.add(...styles({ /* use this.getAttribute() to map values */ }).split(' '));",
      "    root.replaceChildren(...this.children);",
      "    root.append(/* single default slot */this.innerHTML);",
      "    this.replaceChildren(root);",
      "  }",
      "};",
      "",
      "export default function register${TM_FILENAME_BASE/(\\.c)|([a-z]+)|-([a-z-]+)/${2:/pascalcase}${3:/pascalcase}/g}Component() {",
      "  customElements.define(\"wc-${TM_FILENAME_BASE/([^.]+).*/$1/}\", ${TM_FILENAME_BASE/(\\.c)|([a-z]+)|-([a-z-]+)/${2:/pascalcase}${3:/pascalcase}/g}Component);",
      "};"
    ]
  }
}